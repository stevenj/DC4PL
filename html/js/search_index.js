var search_data = {"index":{"searchIndex":["average","average_fast","average_lomem","endpoint","endpoints","linetokenizer","object","playlabdc","stdclass","<<()","<<()","<<()","<<()","[]()","add()","add()","display_results()","each()","get_endpoint()","get_regexstring()","is_endpoint?()","key_to_int()","main()","make_endpoint_id()","mean()","median()","median()","median()","mode()","new()","new()","new()","new()","new()","new()","new()","new()","process_logfile()","range()","showusage()","readme"],"longSearchIndex":["average","average_fast","average_lomem","endpoint","endpoints","linetokenizer","object","playlabdc","stdclass","average#<<()","average_fast#<<()","average_lomem#<<()","endpoints#<<()","linetokenizer#[]()","endpoint#add()","endpoints#add()","playlabdc#display_results()","endpoints#each()","endpoints#get_endpoint()","endpoint::get_regexstring()","endpoint#is_endpoint?()","linetokenizer#key_to_int()","object#main()","endpoint::make_endpoint_id()","average#mean()","average#median()","average_fast#median()","average_lomem#median()","average#mode()","average::new()","average_fast::new()","average_lomem::new()","endpoint::new()","endpoints::new()","linetokenizer::new()","playlabdc::new()","stdclass::new()","playlabdc#process_logfile()","average#range()","object#showusage()",""],"info":[["Average","","Average.html","","<p>Store data and then report statistical summaries on the data when\nrequested. Base Class, Use Average_LoMem …\n"],["Average_Fast","","Average_Fast.html","","<p>A Fast but less memory efficient median implementation\n"],["Average_LoMem","","Average_LoMem.html","","<p>A low memory median using the mode hash storage Memory is reduced because\nwe collate counts of occurences, …\n"],["Endpoint","","Endpoint.html","","<p>A Single Endpoint and its Average data\n"],["Endpoints","","Endpoints.html","","<p>A collection of endpoints\n"],["LineTokenizer","","LineTokenizer.html","","<p>Tokenize the line read from a log into its component data\n"],["Object","","Object.html","",""],["PlayLabDC","","PlayLabDC.html","","<p>Reads a log, optionally named on the command line, Extracts information\nfrom the log and then Reports …\n"],["StdClass","","StdClass.html","","<p>endpoint.rb\n<p>Copyright 2015 Steven Johnson &lt;sakurainds@gmail.com&gt;\n<p>This program is free software; you …\n"],["<<","Average","Average.html#method-i-3C-3C","(value)","<p>Add a value to the averaged data\n<p>Parameters\n<p><code>value</code>  - the value to add\n"],["<<","Average_Fast","Average_Fast.html#method-i-3C-3C","(value)","<p>Add a value to the averaged data\n<p>Parameters\n<p><code>value</code>  - the value to add\n"],["<<","Average_LoMem","Average_LoMem.html#method-i-3C-3C","(value)","<p>Add a value to the averaged data\n<p>Parameters\n<p><code>value</code>  - the value to add\n"],["<<","Endpoints","Endpoints.html#method-i-3C-3C","(endpoint)","<p>Add an endpoint to the collection\n<p>Parameters\n<p><code>endpoint</code>    - An array defining the endpoint.\n"],["[]","LineTokenizer","LineTokenizer.html#method-i-5B-5D","(key)","<p>Return the tokenised data from the line\n<p>Parameters\n<p><code>key</code>  - the key of the data to read.\n"],["add","Endpoint","Endpoint.html#method-i-add","(data)","<p>Add data from a log to the endpoint information storage.\n<p>Parameters\n<p><code>data</code> - The Data to add from the endpoint, …\n"],["add","Endpoints","Endpoints.html#method-i-add","(data)","<p>Add data to the endpoint it belongs to.\n<p>Parameters\n<p><code>data</code> - The Data to add from the endpoint, as tokenised …\n"],["display_results","PlayLabDC","PlayLabDC.html#method-i-display_results","()","<p>Display the results of the Processed log file.\n"],["each","Endpoints","Endpoints.html#method-i-each","()","<p>Allow is to iterate through the collected endpoint data\n<p>Parameters\n<p><code>ep</code> - The Next Endpoint object held in …\n"],["get_endpoint","Endpoints","Endpoints.html#method-i-get_endpoint","(method,path)","<p>Returns the endpoint selected by a method and path\n<p>Parameters\n<p><code>method</code> - The Method of the endpoint. (string) …\n"],["get_regexstring","Endpoint","Endpoint.html#method-c-get_regexstring","(ep_path)","<p>Class Method : Make a regex string from an endpoint, to wildcard {user_id}\n<p>Parameters\n<p><code>ep_path</code>  - the endpoint …\n"],["is_endpoint?","Endpoint","Endpoint.html#method-i-is_endpoint-3F","(method, path)","<p>Is this the same endpoint??\n<p>Parameters\n<p><code>method</code> - The Method of the endpoint. (string)\n"],["key_to_int","LineTokenizer","LineTokenizer.html#method-i-key_to_int","(key)","<p>convert a key to an integer\n<p>Parameters\n<p><code>key</code>  - the key to convert.\n"],["main","Object","Object.html#method-i-main","()","<p>Main entry point of the program\n<p>Parameters\n<p><code>ARGV</code>  - (Optional) the file name to be read.\n"],["make_endpoint_id","Endpoint","Endpoint.html#method-c-make_endpoint_id","(endpoint)","<p>Class Method : Make an ID string from method and endpoint\n<p>Parameters\n<p><code>endpoint</code>    - An array defining the …\n"],["mean","Average","Average.html#method-i-mean","()","<p>Get the mean of values stored to-date\n<p>Returns\n<p><p>the mean value of the data, or nil if no data\n"],["median","Average","Average.html#method-i-median","()","<p>Median is not defined in this class, choose an implementation below\nOtherwise, this class can be used, …\n"],["median","Average_Fast","Average_Fast.html#method-i-median","()","<p>Get the median of values stored to-date\n\n<pre>This is the middle value of the ordered set of all values</pre>\n<p>Returns …\n"],["median","Average_LoMem","Average_LoMem.html#method-i-median","()","<p>Get the median of values stored to-date\n\n<pre>This is the middle value of the ordered set of all values</pre>\n<p>Returns …\n"],["mode","Average","Average.html#method-i-mode","()","<p>Return the mode of the values stored to-date\n<p>Returns\n<p><code>mode</code>  - the mode value array or most prevalent values …\n"],["new","Average","Average.html#method-c-new","()","<p>Create an averaging data store\n"],["new","Average_Fast","Average_Fast.html#method-c-new","()","<p>Create a Fast averaging data store\n"],["new","Average_LoMem","Average_LoMem.html#method-c-new","()","<p>Create a memory efficient averaging data store\n"],["new","Endpoint","Endpoint.html#method-c-new","(endpoint)","<p>Initialise the Endpoint\n<p>Parameters\n<p><code>endpoint</code>    - An array defining the endpoint.\n"],["new","Endpoints","Endpoints.html#method-c-new","()","<p>Initialise the Endpoint collection\n"],["new","LineTokenizer","LineTokenizer.html#method-c-new","(line)","<p>Initialise the tokenised line object\n<p>Parameters\n<p><code>line</code>  - the line read from the log file.\n"],["new","PlayLabDC","PlayLabDC.html#method-c-new","(logfile)","<p>Initialise the log processing class\n<p>Parameters\n<p><code>logfile</code>  - the log file name to be read.\n"],["new","StdClass","StdClass.html#method-c-new","()",""],["process_logfile","PlayLabDC","PlayLabDC.html#method-i-process_logfile","()","<p>Process the log file, line at a time.\n"],["range","Average","Average.html#method-i-range","()","<p>Return the range of the stored items.\n<p>Returns\n<p><code>range</code> - the range of stored values.\n"],["showUsage","Object","Object.html#method-i-showUsage","(filename, defaultfn)","<p>Shows the titles, checks the paramters and prints usage if required.\n<p>Parameters\n<p><code>filename</code>  - the file name …\n"],["README","","README_rdoc.html","","<p>PlayLabDC - PlayLab Developer Challenge\n<p>home  &mdash; github.com/stevenj/DC4PL\n\n<p>Description\n"]]}}